@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class Camp {
  # attendees: Set<Student>
  # registeredStudents: Set<Student>
  - suggestionList: ArrayList<Suggestion>
  # staffInCharge: Staff
  # committees: Set<Student>
  + MAX_COMMITTEE: int
  - enquiryList: ArrayList<Enquiry>
  + addCommittee(Student): boolean
  + addAttendee(Student): boolean
  + addSuggestion(Suggestion): void
  + getAttendees(): Set<Student>
  + getStaffInCharge(): Staff
  + setCommittees(Set<Student>): void
  + addRegisteredStudent(Student): void
  + removeAttendee(Student): boolean
  + setAttendees(Set<Student>): void
  + createSuggestionPlan(): CampDetails
  + addEnquiry(Enquiry): void
  + removeEnquiry(Enquiry): void
  + isStudentRegistered(Student): boolean
  + getCommittees(): Set<Student>
  + getSuggestionList(): ArrayList<Suggestion>
  + getEnquiryList(): ArrayList<Enquiry>
  + removeSuggestion(Suggestion): void
  + removeCommittee(Student): boolean
  + setStaffInCharge(Staff): void
  + getRegisteredStudents(): Set<Student>
}
class CampDetails {
  # description: String
  # totalSlots: Integer
  # closeRegistrationDate: Date
  # name: String
  # endDate: Date
  # school: String
  # ID: String
  # startDate: Date
  # location: String
  # visibility: Boolean
  + setName(String): void
  + isVisible(): Boolean
  + getName(): String
  + getDescription(): String
  + getSchool(): String
  + setEndDate(Date): void
  + setCloseRegistrationDate(Date): void
  + setTotalSlots(int): void
  + getTotalSlots(): Integer
  + setSchool(String): void
  + getLocation(): String
  + setLocation(String): void
  + setID(String): void
  + setStartDate(Date): void
  + setVisibility(boolean): void
  + getCloseRegistrationDate(): Date
  + getID(): String
  + setDescription(String): void
  + getStartDate(): Date
  + getEndDate(): Date
}
class CampList {
  + filterByCampCommittee(Student): CampList
  + sortByLocation(): CampList
  + getAll(): CampList
  + sortByEndDate(): CampList
  + filterByVisibility(boolean): CampList
  + filterBySchool(String): CampList
  + sortByRegistrationCloseDate(): CampList
  + sortByID(): CampList
  + toArray(): Camp[]
  + filterByRegistrationDate(Date): CampList
  + filterByStaff(Staff): CampList
  + filterByStudent(Student): CampList
  + sortByName(): CampList
  + filterByDateRange(Date, Date): CampList
  + filterByID(String): CampList
  + filterByAttendee(Student): CampList
  + sortByStartingDate(): CampList
  + serialize(): ArrayList<ArrayList<String>>
}
class CampReport {
  - exportOption: int
  - fields: String[]
  - camp: CampList
  + getFields(): String[]
  + serialize(): ArrayList<ArrayList<String>>
}
class Enquiry {
  # sender: Student
  # camp: Camp
  # answer: String
  # answeredBy: User
  # ID: String
  # question: String
  + setSender(Student): void
  + getAnswer(): String
  + setAnsweredBy(Student): void
  + setQuestion(String): void
  + getSender(): Student
  + getCamp(): Camp
  + setID(String): void
  + setCamp(Camp): void
  + getAnsweredBy(): User
  + getQuestion(): String
  + getID(): String
  + setAnswer(String, User): void
}
class EnquiryList {
  + filterByID(String): EnquiryList
  + filterByCamp(Camp): EnquiryList
  + filterByStatus(Boolean): EnquiryList
  + serialize(): ArrayList<ArrayList<String>>
  + toArray(): Enquiry[]
  + filterBySender(User): EnquiryList
  + filterByAnsweredBy(User): EnquiryList
}
class EnquiryReport {
  - fields: String[]
  - camp: CampList
  + serialize(): ArrayList<ArrayList<String>>
}
interface IFilterableByAnsweredBy<T> << interface >> {
  + filterByAnsweredBy(User): RepositoryList<T>
}
interface IFilterableByAttendee<T> << interface >> {
  + filterByAttendee(Student): RepositoryList<T>
}
interface IFilterableByCamp<T> << interface >> {
  + filterByCamp(Camp): RepositoryList<T>
}
interface IFilterableByCampCommittee<T> << interface >> {
  + filterByCampCommittee(Student): RepositoryList<T>
}
interface IFilterableByDateRange<T> << interface >> {
  + filterByDateRange(Date, Date): RepositoryList<T>
}
interface IFilterableByID<T> << interface >> {
  + filterByID(String): RepositoryList<T>
}
interface IFilterableByRegistrationDate<T> << interface >> {
  + filterByRegistrationDate(Date): RepositoryList<T>
}
interface IFilterableBySchool<T> << interface >> {
  + filterBySchool(String): RepositoryList<T>
}
interface IFilterableBySender<T> << interface >> {
  + filterBySender(User): RepositoryList<T>
}
interface IFilterableByStatus<T, K> << interface >> {
  + filterByStatus(K): RepositoryList<T>
}
interface IFilterableByStudent<T> << interface >> {
  + filterByStudent(Student): RepositoryList<T>
}
interface IFilterableByVisibility<T> << interface >> {
  + filterByVisibility(boolean): RepositoryList<T>
}
interface ISerializeable << interface >> {
  + serialize(): ArrayList<ArrayList<String>>
}
interface ISortableByEndDate<T> << interface >> {
  + sortByEndDate(): RepositoryList<T>
}
interface ISortableByID<T> << interface >> {
  + sortByID(): RepositoryList<T>
}
interface ISortableByLocation<T> << interface >> {
  + sortByLocation(): RepositoryList<T>
}
interface ISortableByName<T> << interface >> {
  + sortByName(): RepositoryList<T>
}
interface ISortableByRegistrationCloseDate<T> << interface >> {
  + sortByRegistrationCloseDate(): RepositoryList<T>
}
interface ISortableByStartingDate<T> << interface >> {
  + sortByStartingDate(): RepositoryList<T>
}
interface ITaggedItem << interface >> {
  + setID(String): void
  + getID(): String
}
class PerformanceReport {
  - camps: CampList
  - fields: String[]
  + serialize(): ArrayList<ArrayList<String>>
  + getFields(): String[]
}
class Report {
  - fields: String[]
  + getFields(): String[]
  + serialize(): ArrayList<ArrayList<String>>
}
class RepositoryCollection {
  - userRepository: UserList
  - campRepository: CampList
  - enquiryRepository: EnquiryList
  - suggestionRepository: SuggestionList
  + save(): void
  + getCampRepository(): CampList
  + getEnquiryRepository(): EnquiryList
  + getSuggestionRepository(): SuggestionList
  + load(): void
  + getUserRepository(): UserList
}
class RepositoryList<T> {
  # all: List<T>
  + iterator(): Iterator<T>
  + add(T): boolean
  + toArray(): Object[]
  + update(T): boolean
  + size(): int
  + update(T, int): boolean
  + clear(): boolean
  + get(int): T
  + remove(T): boolean
}
class Staff {
  - organizedCampList: ArrayList<Camp>
  + getOrganizedCampList(): CampList
  + addOrganizedCamp(Camp): void
  + removeOrganizedCamp(Camp): void
}
class Student {
  # points: int
  - enquiryList: ArrayList<Enquiry>
  - attendedCampList: ArrayList<Camp>
  - suggestionList: ArrayList<Suggestion>
  - committeeCampList: ArrayList<Camp>
  + getCommitteeCampList(): ArrayList<Camp>
  + addEnquiry(Enquiry): void
  + getSuggestionList(): ArrayList<Suggestion>
  + removeAttendedCamp(Camp): void
  + removeEnquiry(Enquiry): void
  + getPoints(): int
  + removeCommitteeCamp(Camp): void
  + addCommitteeCamp(Camp): void
  + addSuggestion(Suggestion): void
  + addPoints(int): void
  + addAttendedCamp(Camp): void
  + getAttendedCampList(): ArrayList<Camp>
  + removeSuggestion(Suggestion): void
  + getEnquiryList(): ArrayList<Enquiry>
  + setPoints(int): void
}
class Suggestion {
  # ID: String
  # status: SuggestionStatus
  # suggestion: CampDetails
  # reviewedBy: Staff
  # originalCamp: Camp
  # sender: Student
  + setOriginalCamp(Camp): void
  + setReviewedBy(Staff, SuggestionStatus): void
  + getSender(): Student
  + getID(): String
  + getReviewedBy(): Staff
  + getStatus(): SuggestionStatus
  + getSuggestion(): CampDetails
  + setSender(Student): void
  + setID(String): void
  + setSuggestion(CampDetails): void
  + setStatus(SuggestionStatus): void
  + getOriginalCamp(): Camp
  + setReviewedBy(Staff): void
}
class SuggestionList {
  + toArray(): Suggestion[]
  + filterBySender(User): SuggestionList
  + filterByAnsweredBy(User): SuggestionList
  + filterByCamp(Camp): SuggestionList
  + filterByStatus(SuggestionStatus): SuggestionList
  + serialize(): ArrayList<ArrayList<String>>
  + filterByID(String): SuggestionList
}
enum SuggestionStatus << enumeration >> {
  + PENDING: 
  + APPROVED: 
  + REJECTED: 
  + values(): SuggestionStatus[]
  + valueOf(String): SuggestionStatus
}
class User {
  # password: String
  # ID: String
  # name: String
  # faculty: String
  + getName(): String
  + getPassword(): String
  + setPassword(String): void
  + getEmail(): String
  + getID(): String
  + setFaculty(String): void
  + setID(String): void
  + getFaculty(): String
  + setName(String): void
}
class UserFactory {
  + getUser(String, String, String, String): User?
}
class UserList {
  + isEmpty(): boolean
  + serialize(): ArrayList<ArrayList<String>>
  + filterByID(String): UserList
  + toArray(): User[]
}

Camp                              -[#000082,plain]-^  CampDetails                      
Camp                              -[#008200,dashed]-^  ITaggedItem                      
CampDetails                       -[#000082,plain]-^  CampList                         
CampDetails                       -[#008200,dashed]-^  ITaggedItem                      
CampList                          -[#008200,dashed]-^  IFilterableByAttendee            
CampList                          -[#008200,dashed]-^  IFilterableByCampCommittee       
CampList                          -[#008200,dashed]-^  IFilterableByDateRange           
CampList                          -[#008200,dashed]-^  IFilterableByID                  
CampList                          -[#008200,dashed]-^  IFilterableBySchool              
CampList                          -[#008200,dashed]-^  IFilterableByStudent             
CampList                          -[#008200,dashed]-^  IFilterableByVisibility          
CampList                          -[#008200,dashed]-^  ISortableByEndDate               
CampList                          -[#008200,dashed]-^  ISortableByID                    
CampList                          -[#008200,dashed]-^  ISortableByLocation              
CampList                          -[#008200,dashed]-^  ISortableByName                  
CampList                          -[#008200,dashed]-^  ISortableByRegistrationCloseDate 
CampList                          -[#008200,dashed]-^  ISortableByStartingDate          
CampList                          -[#000082,plain]-^  RepositoryList                   
CampReport                        -[#000082,plain]-^  Report                           
Enquiry                           -[#008200,dashed]-^  ITaggedItem                      
EnquiryList                       -[#008200,dashed]-^  IFilterableByAnsweredBy          
EnquiryList                       -[#008200,dashed]-^  IFilterableByCamp                
EnquiryList                       -[#008200,dashed]-^  IFilterableByID                  
EnquiryList                       -[#008200,dashed]-^  IFilterableBySender              
EnquiryList                       -[#008200,dashed]-^  IFilterableByStatus              
EnquiryList                       -[#000082,plain]-^  RepositoryList                   
EnquiryReport                     -[#000082,plain]-^  Report                           
IFilterableByAnsweredBy           -[#595959,dashed]->  ITaggedItem                      
IFilterableByAttendee             -[#595959,dashed]->  ITaggedItem                      
IFilterableByCamp                 -[#595959,dashed]->  ITaggedItem                      
IFilterableByCampCommittee        -[#595959,dashed]->  ITaggedItem                      
IFilterableByDateRange            -[#595959,dashed]->  ITaggedItem                      
IFilterableByID                   -[#595959,dashed]->  ITaggedItem                      
IFilterableByRegistrationDate     -[#595959,dashed]->  ITaggedItem                      
IFilterableBySchool               -[#595959,dashed]->  ITaggedItem                      
IFilterableBySender               -[#595959,dashed]->  ITaggedItem                      
IFilterableByStatus               -[#595959,dashed]->  ITaggedItem                      
IFilterableByStudent              -[#595959,dashed]->  ITaggedItem                      
IFilterableByVisibility           -[#595959,dashed]->  ITaggedItem                      
ISortableByEndDate                -[#595959,dashed]->  ITaggedItem                      
ISortableByID                     -[#595959,dashed]->  ITaggedItem                      
ISortableByLocation               -[#595959,dashed]->  ITaggedItem                      
ISortableByName                   -[#595959,dashed]->  ITaggedItem                      
ISortableByRegistrationCloseDate  -[#595959,dashed]->  ITaggedItem                      
ISortableByStartingDate           -[#595959,dashed]->  ITaggedItem                      
PerformanceReport                 -[#000082,plain]-^  Report                           
Report                            -[#008200,dashed]-^  ISerializeable                   
RepositoryList                    -[#008200,dashed]-^  ISerializeable                   
RepositoryList                    -[#595959,dashed]->  ITaggedItem                      
Staff                             -[#000082,plain]-^  User                             
Student                           -[#000082,plain]-^  User                             
Suggestion                        -[#008200,dashed]-^  ITaggedItem                      
SuggestionList                    -[#008200,dashed]-^  IFilterableByAnsweredBy          
SuggestionList                    -[#008200,dashed]-^  IFilterableByCamp                
SuggestionList                    -[#008200,dashed]-^  IFilterableByID                  
SuggestionList                    -[#008200,dashed]-^  IFilterableBySender              
SuggestionList                    -[#008200,dashed]-^  IFilterableByStatus              
SuggestionList                    -[#000082,plain]-^  RepositoryList                   
User                              -[#008200,dashed]-^  ITaggedItem                      
UserList                          -[#008200,dashed]-^  IFilterableByID                  
UserList                          -[#000082,plain]-^  RepositoryList                   
@enduml
